package main

import "strings"
import "time"

func postUrl(postdate string) string {
	return "/nightly.changelog.com/" + strings.ReplaceAll(postdate, "-", "/")
}

func today() string {
	loc, _ := time.LoadLocation("America/Chicago")
	date := time.Now().In(loc)

	// 10 PM or later
	if date.Hour() >= 22 {
		return date.Format("2006-01-02")
	}
	return date.Add(-24 * time.Hour).Format("2006-01-02")
}

func todayUri() string {
	return "/browse/" + today()
}

func prevUri(postdate string) string {
	if postdate == "2015-01-01" {
		return ""
	}
	date, err := time.Parse("2006-01-02", postdate)
	if err != nil {
		return ""
	}
        previousDay := date.AddDate(0, 0, -1)
	return "/browse/" + previousDay.Format("2006-01-02")
}

func nextUri(postdate string) string {
	if postdate == today() {
		return ""
	}
	date, err := time.Parse("2006-01-02", postdate)
	if err != nil {
		return ""
	}
        nextDay := date.AddDate(0, 0, 1)
	return "/browse/" + nextDay.Format("2006-01-02")
}

templ body(postdate string) {
<div hx-ext="response-targets">
	<div class="btm-right" hx-ext="path-params">
		<sl-input
			type="date"
			name="postdate"
			placeholder="Date"
			value={ postdate }
			min="2015-01-01"
			max={ today() }
			hx-get="/browse/:postdate"
			hx-push-url="true"
			hx-trigger="input changed delay:1s"
			hx-target="body"
		></sl-input>
		<div>
			<sl-icon-button
				library="default"
				name="chevron-double-left"
				hx-push-url="true"
				hx-get="/browse/2015-01-01"
				hx-target="body"
			></sl-icon-button>

			<sl-icon-button
				library="default"
				name="chevron-left"
				hx-push-url="true"
				hx-get={ prevUri(postdate) }
				hx-target="body"
				class="prev-date"
			></sl-icon-button>
			<sl-icon-button
				library="default"
				name="chevron-right"
				hx-push-url="true"
				hx-get={ nextUri(postdate) }
				hx-target="body"
				class="next-date"
			></sl-icon-button>

			<sl-icon-button
				library="default"
				name="chevron-double-right"
				hx-push-url="true"
				hx-get={ todayUri() }
				hx-target="body"
			></sl-icon-button>

		</div>
	</div>
	<div
		id="main"
		tabindex="0"
		style="height:100vh"
		hx-get={ postUrl(postdate) }
		hx-swap="innerHTML"
		hx-target="#main"
		hx-target-404="#main"
		hx-indicator="#spinner"
		hx-trigger="load">
	</div>
	<style>
	.htmx-indicator {
		opacity: 0;
		transition: opacity 200ms ease-in;
	}
	.htmx-request .htmx-indicator {
		opacity: 1;
	}
	.htmx-request.htmx-indicator {
		opacity: 1;
	}
	#spinner {
		position: fixed;
		bottom: 49%;
		left: 49%;
		scale: 2;
		fill: #56ad83;
	}
	</style>
	@loadingSvg()
</div>
}

templ loadingSvg() {
<svg id="spinner" class="htmx-indicator" width="17" height="16" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg">
    <rect y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="30" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="60" width="15" height="140" rx="6">
        <animate attributeName="height" begin="0s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="90" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="120" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
</svg>
}
