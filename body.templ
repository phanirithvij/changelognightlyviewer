package main

import "strings"
import "time"

func postUrl(postdate string) string {
	return "/nightly.changelog.com/" + strings.ReplaceAll(postdate, "-", "/")
}

func getPrefix(jsenabled bool) string {
	pref := "/browsehtml/"
	if jsenabled {
		pref = "/browse/"
	}
	return pref + "?postdate="
}

func today() string {
	loc, _ := time.LoadLocation("America/Chicago")
	date := time.Now().In(loc)

	// 10 PM or later
	if date.Hour() >= 22 {
		return date.Format("2006-01-02")
	}
	return date.Add(-24 * time.Hour).Format("2006-01-02")
}

func firstUri(jsenabled bool) string {
	return getPrefix(jsenabled) + "2015-01-01"
}

func todayUri(jsenabled bool) string {
	return getPrefix(jsenabled) + today()
}

func dayoffsetUri(postdate string, offset int, jsenabled bool) string {
	date, err := time.Parse("2006-01-02", postdate)
	if err != nil {
		return ""
	}
        otherDay := date.AddDate(0, 0, offset)
	return getPrefix(jsenabled) + otherDay.Format("2006-01-02")
}

func nextUri(postdate string, jsenabled bool) string {
	if postdate == today() {
		return ""
	}
	return dayoffsetUri(postdate, 1, jsenabled)
}

func prevUri(postdate string, jsenabled bool) string {
	if postdate == "2015-01-01" {
		return ""
	}
	return dayoffsetUri(postdate, -1, jsenabled)
}

templ body(postdate string, jsenabled bool) {
<div hx-ext="response-targets">
<style>
</style>
	<div class="btm-right" hx-ext="path-params">
		<form>
		<input
			type="date"
			name="postdate"
			placeholder="Date"
			value={ postdate }
			min="2015-01-01"
			max={ today() }
			hx-get="/browse?postdate=:postdate"
			hx-push-url="true"
			hx-trigger="input changed delay:1s"
			hx-target="body"
		></input>
		<button type="submit" id="date-go" style="display: none">go</button>
		</form>
		<div hx-boost="true">
			<a
				library="default"
				name="chevron-double-left"
				hx-push-url="true"
				href={ templ.SafeURL(firstUri(jsenabled)) }
				hx-target="body"
				class="glink"
			>&lt;&lt;</a>
			<a
				library="default"
				name="chevron-left"
				hx-push-url="true"
				href={ templ.SafeURL(prevUri(postdate, jsenabled)) }
				hx-target="body"
				class="prev-date glink"
			>&lt;</a>
			<a
				library="default"
				name="chevron-right"
				hx-push-url="true"
				href={ templ.SafeURL(nextUri(postdate, jsenabled)) }
				hx-target="body"
				class="next-date glink"
			>&gt;</a>
			<a
				library="default"
				name="chevron-double-right"
				hx-push-url="true"
				href={ templ.SafeURL(todayUri(jsenabled)) }
				hx-target="body"
				class="glink"
			>&gt;&gt;</a>

		</div>
	</div>

	if jsenabled {
	<div
		id="main"
		tabindex="0"
		hx-get={ postUrl(postdate) }
		hx-swap="innerHTML"
		hx-target="#main"
		hx-target-404="#main"
		hx-indicator="#spinner"
		hx-trigger="load">
	</div>

	<style>
	.htmx-indicator {
		opacity: 0;
		transition: opacity 200ms ease-in;
	}
	.htmx-request .htmx-indicator {
		opacity: 1;
	}
	.htmx-request.htmx-indicator {
		opacity: 1;
	}
	#spinner {
		position: fixed;
		bottom: 49%;
		left: 49%;
		scale: 2;
		fill: #56ad83;
	}
	</style>
		@loadingSvg()
	} else {
	<iframe
		id="main"
		tabindex="0"
		src={ postUrl(postdate) }
		>
	</iframe>
	}
</div>
}

templ loadingSvg() {
<svg id="spinner" class="htmx-indicator" width="17" height="16" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg">
    <rect y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="30" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="60" width="15" height="140" rx="6">
        <animate attributeName="height" begin="0s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="90" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
    <rect x="120" y="10" width="15" height="120" rx="6">
        <animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite"/>
        <animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite"/>
    </rect>
</svg>
}
