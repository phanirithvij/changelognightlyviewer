// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.648
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"
	"strings"
	"time"
)

func generateCalendarHTML(dateStr, viewy, viewm string) string {
	dateParts := strings.Split(dateStr, "-")
	year, _ := strconv.Atoi(dateParts[0])
	month, _ := strconv.Atoi(dateParts[1])
	day, _ := strconv.Atoi(dateParts[2])

	if viewy == "" {
		viewy = dateParts[0]
	}
	if viewm == "" {
		viewm = dateParts[1]
	}
	viewyear, _ := strconv.Atoi(viewy)
	viewmonth, _ := strconv.Atoi(viewm)

	t := time.Date(viewyear, time.Month(viewmonth), 1, 0, 0, 0, 0, time.UTC)
	startDay := int(t.Weekday())

	nextDay := time.Date(viewyear, time.Month(viewmonth+1), 0, 0, 0, 0, 0, time.UTC)
	daysInMonth := nextDay.Day()
	previousDay := t.AddDate(0, 0, -1)

	nextDay = nextDay.AddDate(0, 0, 1)
	pyear := previousDay.Year()
	nyear := nextDay.Year()
	pmonth := int(previousDay.Month())
	nmonth := int(nextDay.Month())

	html := t.Month().String() + " " + viewy
	html += "<a href='/cal?date=" + dateStr + "&yyyy=" + strconv.Itoa(pyear) + "&mm=" + strconv.Itoa(pmonth) + "'>&lt;</a>"
	html += "<table hx-boost='true'>"
	html += "<tr><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th><th>Sun</th></tr>"

	d := 1

	for d <= daysInMonth {
		html += "<tr>"
		for i := 0; i < 7; i++ {
			if i < startDay && d == 1 {
				html += "<td></td>"
			} else if d <= daysInMonth {
				if d == day && viewyear == year && viewmonth == month {
					html += "<td class='selected-date'>" + strconv.Itoa(d) + "</td>"
				} else {
					html += "<td>" + "<a href='/cal?date=" +
						time.Date(viewyear, time.Month(viewmonth), d, 0, 0, 0, 0, time.UTC).Format("2006-01-02") +
						"&yyyy=" + viewy + "&mm=" + viewm +
						"'>" + strconv.Itoa(d) + "</td>"
				}
				d++
			} else {
				html += "<td></td>"
			}
		}
		html += "</tr>"
	}

	html += "</table>"

	html += "<a href='/cal?date=" + dateStr + "&yyyy=" + strconv.Itoa(nyear) + "&mm=" + strconv.Itoa(nmonth) + "'>&gt;</a>"
	html += "<a href='/cal?date=" + dateStr + "'>jump to selected</a>"
	return html
}

func calendar(dateStr, viewyear, viewmonth string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n\t\t.selected-date {\n\t\t\tcolor: red;\n\t\t}\n\t\t#cal {\n\t\t\tdisplay: flex;\n\t\t\talign-items: start;\n\t\t\tjustify-content: space-between;\n\t\t}\n\t</style><div id=\"cal\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(generateCalendarHTML(dateStr, viewyear, viewmonth)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
